apply plugin: "java"
apply plugin: "signing"

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "nz.co.lolnet"
archivesBaseName = "Equity"
version = "2.0.0"

configurations {
    provided {
        compile.extendsFrom(provided)
    }
}

repositories {
    jcenter()
}

dependencies {
    compile("com.google.code.gson:gson:2.8.4")
    compile("io.netty:netty-all:4.1.23.Final")
    compile("org.apache.commons:commons-lang3:3.7")
    compile("org.apache.logging.log4j:log4j-core:2.10.0")
    annotationProcessor("org.apache.logging.log4j:log4j-core:2.10.0")
    compile("org.apache.logging.log4j:log4j-slf4j-impl:2.10.0")
    compile("org.jline:jline-reader:3.5.1")
    compile("org.jline:jline-terminal:3.5.1")
}

jar {
    manifest {
        attributes("Main-Class": "nz.co.lolnet.equity.Main")
    }

    from {
        (configurations.compile - configurations.provided).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

processResources {
    from("LICENSE")
    rename("LICENSE", "LICENSE-" + archivesBaseName)
}

task signJar {
    doFirst {
        if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
            project.logger.warn("========== [WARNING] ==========")
            project.logger.warn("")
            project.logger.warn("   This build is not signed!   ")
            project.logger.warn("")
            project.logger.warn("========== [WARNING] ==========")
            throw new StopExecutionException()
        }
    }

    doLast {
        jar.outputs.files.each {
            ant.signjar(
                jar: it,
                alias: project.property("signing.alias"),
                storepass: project.property("signing.keyStorePassword"),
                keystore: project.property("signing.keyStorePath"),
                keypass: project.property("signing.keyStorePassword"),
                preservelastmodified: project.property("signing.preserveLastModified"),
                tsaurl: project.property("signing.timestampAuthority"),
                digestalg: project.property("signing.digestAlgorithm")
            )
            project.logger.lifecycle("JAR Signed: " + it.name)

            signing.sign(it)
            project.logger.lifecycle("PGP Signed: " + it.name)
        }
    }
}